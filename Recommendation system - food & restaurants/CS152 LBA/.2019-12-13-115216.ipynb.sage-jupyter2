{"backend_state":"running","kernel":"python3","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":88399872},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1576270340691,"exec_count":24,"id":"ecd76f","input":"KB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(medium), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(non_vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- ask(price, X).\ndistance(X) :- ask(distance, X).\naccessibility(X) :- ask(accessibility, X).\ncuisine(X) :- ask(cuisine, X).\nmeal_type(X) :- ask(meal_type, X).\nvegan_option(X) :- ask(vegan_option, X).\nlanguage(X) :- ask(language, X).\nopening_hours(X) :- ask(opening_hours, X).\n\n\n% Asking clauses\nmultivalued(none).\n\nask(A, V):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nask(A, V):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nask(A, V):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nask(A, V):-\nread_py(A,V,Y), % get the answer\nasserta(known(Y, A, V)), % remember it\nwrite_py(known(Y, A, V)),\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"KB.pl\", \"w\") as text_file:\n    text_file.write(KB)","kernel":"python3","pos":2,"start":1576270340680,"state":"done","type":"cell"}
{"cell_type":"code","end":1576270352608,"exec_count":25,"id":"39e625","input":"# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    print(str(X))\n    sys.stdout.flush()\n    return True\n\nusers_answers = dict()\n\npossible_answers = {\n    \"price\": [\"low\", \"medium\", \"high\"],\n    \"distance\": [\"near\", \"far\"], \n    \"accessibility\": [\"bicycle\", \"bus\"],\n    \"cuisine\": [\"asian\", \"middle_eastern\", \"western\"],\n    \"meal_type\": [\"cafe\", \"snack\", \"restaurant\"],\n    \"vegan_option\": [\"vegan\", \"non_vegan\"],\n    \"language\": [\"english\", \"german\"],\n    \"opening_hours\": [\"morning\", \"afternoon\", \"evening\"]\n}\n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        # if engine(turning_over), then str(A) = engine; str(V) = turning_over\n        while str(A) not in users_answers:\n            response = input(str(A) + \" is \" + \"/\".join(possible_answers[str(A)]) + \"? \")\n            if response in possible_answers[str(A)]:\n                users_answers[str(A)] = response\n            else:\n                print(\"Choose your answer from the possible answers.\")\n        \n        if str(A) in users_answers and users_answers[str(A)] == str(V):\n            Y.unify(\"yes\")\n        else:\n            Y.unify(\"no\")\n\n        return True\n    else:\n        return False\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\n#solution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)][0]\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)]\nif solution == []:\n    print(\"Cannot find suitable result. Try again\")\nelse:\n    solution = solution[0]\n    print(\"Your restaurant is \" + (f\"{solution['X']}.\" if solution else \"unknown.\"))","kernel":"python3","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"price is low/medium/high? "},"output_type":"stream","value":"low"},"3":{"name":"input","opts":{"password":false,"prompt":"distance is near/far? "},"output_type":"stream","value":"near"},"5":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle/bus? "},"output_type":"stream","value":"bicycle"},"7":{"name":"input","opts":{"password":false,"prompt":"cuisine is asian/middle_eastern/western? "},"output_type":"stream","value":"asian"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"price is low/medium/high? "},"value":"low"},"1":{"name":"stdout","text":"known(no, price, medium)\n"},"10":{"name":"stdout","text":"Cannot find suitable result. Try again\n"},"2":{"name":"stdout","text":"known(yes, price, low)\n"},"3":{"name":"input","opts":{"password":false,"prompt":"distance is near/far? "},"value":"near"},"4":{"name":"stdout","text":"known(yes, distance, near)\n"},"5":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle/bus? "},"value":"bicycle"},"6":{"name":"stdout","text":"known(yes, accessibility, bicycle)\n"},"7":{"name":"input","opts":{"password":false,"prompt":"cuisine is asian/middle_eastern/western? "},"value":"asian"},"8":{"name":"stdout","text":"known(no, cuisine, middle_eastern)\n"},"9":{"name":"stdout","text":"known(no, cuisine, western)\n"}},"pos":3,"start":1576270341071,"state":"done","type":"cell"}
{"cell_type":"code","end":1576273780837,"exec_count":37,"id":"8ceb96","input":"!apt install swi-prolog","kernel":"python3","output":{"0":{"name":"stdout","text":"\rReading package lists... 0%\r"},"1":{"name":"stdout","text":"\rReading package lists... 0%\r\rReading package lists... 0%\r"},"10":{"name":"stdout","text":"\rReading package lists... 68%\r\rReading package lists... 68%\r"},"11":{"name":"stdout","text":"\rReading package lists... 69%\r\rReading package lists... 70%\r\rReading package lists... 70%\r"},"12":{"name":"stdout","text":"\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r"},"13":{"name":"stdout","text":"\rReading package lists... 74%\r\rReading package lists... 74%\r"},"14":{"name":"stdout","text":"\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r"},"15":{"name":"stdout","text":"\rReading package lists... 81%\r\rReading package lists... 81%\r"},"16":{"name":"stdout","text":"\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r"},"17":{"name":"stdout","text":"\rReading package lists... 86%\r\rReading package lists... 86%\r"},"18":{"name":"stdout","text":"\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 89%\r\rReading package lists... 89%\r"},"19":{"name":"stdout","text":"\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r"},"2":{"name":"stdout","text":"\rReading package lists... 3%\r\rReading package lists... 3%\r"},"20":{"name":"stdout","text":"\rReading package lists... 91%\r\rReading package lists... 91%\r\rReading package lists... 91%\r"},"21":{"name":"stdout","text":"\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r"},"22":{"name":"stdout","text":"\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r"},"23":{"name":"stdout","text":"\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r"},"24":{"name":"stdout","text":"\rReading package lists... Done\r\r\n"},"25":{"name":"stdout","text":"\rBuilding dependency tree... 0%\r\rBuilding dependency tree... 0%\r"},"26":{"name":"stdout","text":"\rBuilding dependency tree... 50%\r\rBuilding dependency tree... 50%\r"},"27":{"name":"stdout","text":"\rBuilding dependency tree... 60%\r"},"28":{"name":"stdout","text":"\rBuilding dependency tree       \r\r\n\rReading state information... 0%\r\rReading state information... 0%\r\rReading state information... Done\r\r\n"},"29":{"name":"stdout","text":"swi-prolog is already the newest version (7.6.4+dfsg-1build1).\r\n"},"3":{"name":"stdout","text":"\rReading package lists... 6%\r\rReading package lists... 6%\r"},"30":{"name":"stdout","text":"0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.\r\n"},"31":{"name":"stdout","text":"W: Not using locking for read only lock file /var/lib/dpkg/lock-frontend\r\nW: Not using locking for read only lock file /var/lib/dpkg/lock\r\nW: Not using locking for read only lock file /var/cache/apt/archives/lock\r\n"},"4":{"name":"stdout","text":"\rReading package lists... 6%\r\rReading package lists... 6%\r\rReading package lists... 7%\r\rReading package lists... 7%\r"},"5":{"name":"stdout","text":"\rReading package lists... 18%\r"},"6":{"name":"stdout","text":"\rReading package lists... 35%\r\rReading package lists... 35%\r"},"7":{"name":"stdout","text":"\rReading package lists... 39%\r"},"8":{"name":"stdout","text":"\rReading package lists... 63%\r\rReading package lists... 63%\r\rReading package lists... 64%\r\rReading package lists... 64%\r"},"9":{"name":"stdout","text":"\rReading package lists... 64%\r\rReading package lists... 64%\r"}},"pos":1,"start":1576273775335,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5ed4f7","input":"#Hoang\nKB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(low), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), vegan_option(vegan), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), vegan_option(vegan), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), vegan_option(vegan), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- ask(price, X).\ndistance(X) :- ask(distance, X).\naccessibility_transport(X) :- ask(accessibility_transport, X).\ncuisine(X) :- ask(cuisine, X).\nmeal(X) :- ask(meal, X).\nvegan(X) :- ask(vegan, X).\nlanguage(X) :- ask(language, X).\nopening_hours(X) :- ask(opening_hours, X).\n\n\n% Asking clauses\nmultivalued(none).\n\nask(A, V):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nask(A, V):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nask(A, V):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nask(A, V):-\nread_py(A,V,Y), % get the answer\nasserta(known(Y, A, V)), % remember it\nwrite_py(known(Y, A, V)),\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"KB.pl\", \"w\") as text_file:\n    text_file.write(KB)","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d2338d","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e2a87b","input":"# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    print(str(X))\n    sys.stdout.flush()\n    return True\n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        # if engine(turning_over), then str(A) = engine; str(V) = turning_over\n        response = input(str(A) + \" is \" + str(V) + \"? \")\n        Y.unify(response)\n        return True\n    else:\n        return False\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)][0]\nprint(solution)\nprint(\"Your restaurant is \" + (f\"{solution['X']}.\" if solution else \"unknown.\"))","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e99b0b","input":"#Hoang\n\n# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    print(str(X))\n    sys.stdout.flush()\n    return True\n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        # if engine(turning_over), then str(A) = engine; str(V) = turning_over\n        response = input(str(A) + \" is \" + str(V) + \"? \")\n        Y.unify(response)\n        return True\n    else:\n        return False\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)][0]\nprint(solution)\nprint(\"Your restaurant is \" + (f\"{solution['X']}.\" if solution else \"unknown.\"))","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"1c6ada","input":"# Yong\n\nKB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(low), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), vegan_option(vegan), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), vegan_option(vegan), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), vegan_option(vegan), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- ask(price, X).\ndistance(X) :- ask(distance, X).\naccessibility(X) :- ask(accessibility, X).\ncuisine(X) :- ask(cuisine, X).\nmeal_type(X) :- ask(meal_type, X).\nvegan_option(X) :- ask(vegan_option, X).\nlanguage(X) :- ask(language, X).\nopening_hours(X) :- ask(opening_hours, X).\n\n\n% Asking clauses\nmultivalued(none).\n\nask(A, V):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nask(A, V):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nask(A, V):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nask(A, V):-\nread_py(A,V,Y), % get the answer\nasserta(known(Y, A, V)), % remember it\nwrite_py(known(Y, A, V)),\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"yong_KB.pl\", \"w\") as text_file:\n    text_file.write(KB)\n    \n# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    print(str(X))\n    sys.stdout.flush()\n    return True\n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        # if engine(turning_over), then str(A) = engine; str(V) = turning_over\n        response = input(str(A) + \" is \" + str(V) + \"? \")\n        Y.unify(response)\n        return True\n    else:\n        return False\n\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"yong_KB.pl\") # open the KB\ncall(retractall(known))\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)][0]\nprint(\"Your restaurant is \" + (f\"{solution['X']}.\" if solution else \"unknown.\"))","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"price is low? "},"output_type":"stream","value":""},"10":{"name":"input","opts":{"password":false,"prompt":"meal_type is restaurant? "},"output_type":"stream","value":"yes"},"12":{"name":"input","opts":{"password":false,"prompt":"vegan_option is vegan? "},"output_type":"stream","value":"yes"},"14":{"name":"input","opts":{"password":false,"prompt":"language is english? "},"output_type":"stream","value":"yes"},"16":{"name":"input","opts":{"password":false,"prompt":"opening_hours is morning? "},"output_type":"stream","value":"yes"},"2":{"name":"input","opts":{"password":false,"prompt":"price is medium? "},"output_type":"stream","value":"yes"},"4":{"name":"input","opts":{"password":false,"prompt":"distance is near? "},"output_type":"stream","value":"yes"},"6":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle? "},"output_type":"stream","value":"yes"},"8":{"name":"input","opts":{"password":false,"prompt":"cuisine is asian? "},"output_type":"stream","value":"yes"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"price is low? "},"output_type":"stream","value":""},"1":{"name":"stdout","output_type":"stream","text":"known(, price, low)\n"},"10":{"name":"input","opts":{"password":false,"prompt":"meal_type is restaurant? "},"output_type":"stream","value":"yes"},"11":{"name":"stdout","output_type":"stream","text":"known(yes, meal_type, restaurant)\n"},"12":{"name":"input","opts":{"password":false,"prompt":"vegan_option is vegan? "},"output_type":"stream","value":"yes"},"13":{"name":"stdout","output_type":"stream","text":"known(yes, vegan_option, vegan)\n"},"14":{"name":"input","opts":{"password":false,"prompt":"language is english? "},"output_type":"stream","value":"yes"},"15":{"name":"stdout","output_type":"stream","text":"known(yes, language, english)\n"},"16":{"name":"input","opts":{"password":false,"prompt":"opening_hours is morning? "},"output_type":"stream","value":"yes"},"17":{"name":"stdout","output_type":"stream","text":"known(yes, opening_hours, morning)\n"},"18":{"name":"stdout","output_type":"stream","text":"{'X': 'green_Rice'}\nYour restaurant is green_Rice.\n"},"2":{"name":"input","opts":{"password":false,"prompt":"price is medium? "},"output_type":"stream","value":"yes"},"3":{"name":"stdout","output_type":"stream","text":"known(yes, price, medium)\n"},"4":{"name":"input","opts":{"password":false,"prompt":"distance is near? "},"output_type":"stream","value":"yes"},"5":{"name":"stdout","output_type":"stream","text":"known(yes, distance, near)\n"},"6":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle? "},"output_type":"stream","value":"yes"},"7":{"name":"stdout","output_type":"stream","text":"known(yes, accessibility, bicycle)\n"},"8":{"name":"input","opts":{"password":false,"prompt":"cuisine is asian? "},"output_type":"stream","value":"yes"},"9":{"name":"stdout","output_type":"stream","text":"known(yes, cuisine, asian)\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"434ce6","input":"","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"low/medium/high"},"output_type":"stream","value":"low"},"10":{"name":"input","opts":{"password":false,"prompt":"meal_type is restaurant? "},"output_type":"stream","value":"yes"},"12":{"name":"input","opts":{"password":false,"prompt":"vegan_option is non_vegan? "},"output_type":"stream","value":"yes"},"14":{"name":"input","opts":{"password":false,"prompt":"language is german? "},"output_type":"stream","value":"s"},"16":{"name":"input","opts":{"password":false,"prompt":"language is english? "},"output_type":"stream","value":"s"},"2":{"name":"input","opts":{"password":false,"prompt":"distance is near? "},"output_type":"stream","value":"yes"},"4":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle? "},"output_type":"stream","value":"s"},"6":{"name":"input","opts":{"password":false,"prompt":"accessibility is bus? "},"output_type":"stream","value":"yes"},"8":{"name":"input","opts":{"password":false,"prompt":"cuisine is western? "},"output_type":"stream","value":"yes"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"low/medium/high"},"output_type":"stream","value":"low"},"1":{"name":"stdout","output_type":"stream","text":"known(_2996, price, low)\n"},"10":{"name":"input","opts":{"password":false,"prompt":"meal_type is restaurant? "},"output_type":"stream","value":"yes"},"11":{"name":"stdout","output_type":"stream","text":"known(yes, meal_type, restaurant)\n"},"12":{"name":"input","opts":{"password":false,"prompt":"vegan_option is non_vegan? "},"output_type":"stream","value":"yes"},"13":{"name":"stdout","output_type":"stream","text":"known(yes, vegan_option, non_vegan)\n"},"14":{"name":"input","opts":{"password":false,"prompt":"language is german? "},"output_type":"stream","value":"s"},"15":{"name":"stdout","output_type":"stream","text":"known(s, language, german)\n"},"16":{"name":"input","opts":{"password":false,"prompt":"language is english? "},"output_type":"stream","value":"s"},"17":{"name":"stdout","output_type":"stream","text":"known(s, language, english)\n"},"18":{"ename":"IndexError","evalue":"list index out of range","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-c55d22106cdd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0mprolog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconsult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"KB.pl\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# open the KB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretractall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mknown\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 107\u001b[0;31m \u001b[0msolution\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0msoln\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msoln\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprolog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"restaurant(X).\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxresult\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    108\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolution\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Your restaurant is \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34mf\"{solution['X']}.\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0msolution\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"unknown.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]},"2":{"name":"input","opts":{"password":false,"prompt":"distance is near? "},"output_type":"stream","value":"yes"},"3":{"name":"stdout","output_type":"stream","text":"known(yes, distance, near)\n"},"4":{"name":"input","opts":{"password":false,"prompt":"accessibility is bicycle? "},"output_type":"stream","value":"s"},"5":{"name":"stdout","output_type":"stream","text":"known(s, accessibility, bicycle)\n"},"6":{"name":"input","opts":{"password":false,"prompt":"accessibility is bus? "},"output_type":"stream","value":"yes"},"7":{"name":"stdout","output_type":"stream","text":"known(yes, accessibility, bus)\n"},"8":{"name":"input","opts":{"password":false,"prompt":"cuisine is western? "},"output_type":"stream","value":"yes"},"9":{"name":"stdout","output_type":"stream","text":"known(yes, cuisine, western)\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"874ae0","input":"KB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(medium), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(non_vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- ask(price, X).\ndistance(X) :- ask(distance, X).\naccessibility(X) :- ask(accessibility, X).\ncuisine(X) :- ask(cuisine, X).\nmeal_type(X) :- ask(meal_type, X).\nvegan_option(X) :- ask(vegan_option, X).\nlanguage(X) :- ask(language, X).\nopening_hours(X) :- ask(opening_hours, X).\n\n\n% Asking clauses\nmultivalued(none).\n\nask(A, V):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nask(A, V):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nask(A, V):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nask(A, V):-\nread_py(A,V,Y), % get the answer\nasserta(known(Y, A, V)), % remember it\nwrite_py(known(Y, A, V)),\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"KB.pl\", \"w\") as text_file:\n    text_file.write(KB)\n\n\n\n# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\nimport string\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    #print(str(X))\n    sys.stdout.flush()\n    return True\n\n# a dictionary to store users' inputs\nusers_answers = dict()\n\n\npossible_answers = {\n    \"price\": [\"1. low\", \"2. medium\", \"3. high\"],\n    \"distance\": [\"1. near\", \"2. far\"], \n    \"accessibility\": [\"1. bicycle\", \"2. bus\"],\n    \"cuisine\": [\"1. asian\", \"2. middle_eastern\", \"3. western\"],\n    \"meal_type\": [\"1. cafe\", \"2. snack\", \"3. restaurant\"],\n    \"vegan_option\": [\"1. vegan\", \"2. non_vegan\"],\n    \"language\": [\"1. english\", \"2. german\"],\n    \"opening_hours\": [\"1. morning\", \"2. afternoon\", \"3. evening\"]\n}\n\nmenu = {\n            \"the_Visit\": \"https://drive.google.com/file/d/1hhxTrzMNxQZqfUoILd9tYWX5hfXX6v3Y/view\",\n            \"maroush\": \"https://www.marooush.de/menus/marooush_speisekarte.pdf\",\n            \"hacibaba\": \"https://www.hacibaba-berlin.de/#cat1\", \n            \"green_Rice\": \"https://drive.google.com/file/d/1Gd_arwkY0N5jhiDfMDZDsBVCQ4dl8UFr/view\",\n            \"tangs\": \"https://www.tangs-kantine.de/suppen-chinesisches-restaurant-berlin-kreuzberg/\",\n            \"parker_Bowles\": \"https://parker-bowles.com/wp-content/uploads/2019/08/DELI.pdf\",\n            \"zur_Gerichtslaube\": \"http://www.gerichtslaube.de/wp-content/uploads/2019/11/Speisekarte-eng-19.pdf\",\n            \"cocolo_ramen\": \"https://drive.google.com/file/d/1sNGL_7eRXGBHULfOvvEv1NCrAomzSMVE/view\"\n        }   \n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        while str(A) not in users_answers:\n            response = input(\"\\nPlease choose a \" + str(A) + \" category: \" + \"(\" + \" / \".join(possible_answers[str(A)]) + \")\" +\" ---- Your choice is: \")\n            if response.isnumeric():\n                response = int(response)\n                if response - 1 in list(range(len(possible_answers[str(A)]))):\n                    users_answers[str(A)] = possible_answers[str(A)][response-1][3:]\n                else:\n                    print(\"Choose your answer from the possible answers.\")\n            else:\n                print(\"Choose your answer from the possible answers.\")\n        \n        if str(A) in users_answers and users_answers[str(A)] == str(V):\n            Y.unify(\"yes\")\n        else:\n            Y.unify(\"no\")\n\n        return True\n    else:\n        return False\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)]\nif solution == []:\n    print(\"Cannot find suitable result. Try again\")\nelse:\n    solution = solution[0]\n    print(\"You should go to \" + (f\"{solution['X']}\" if solution else \"unknown.\") + \" restaurant.\")\n    print(\"Here is the menu:\", menu[solution['X']])","kernel":"python3","output":{"0":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a price category: (1. low / 2. medium / 3. high) ---- Your choice is: "},"value":"2"},"1":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a distance category: (1. near / 2. far) ---- Your choice is: "},"value":"1"},"2":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a accessibility category: (1. bicycle / 2. bus) ---- Your choice is: "},"value":"1"},"3":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a cuisine category: (1. asian / 2. middle_eastern / 3. western) ---- Your choice is: "},"value":"3"},"4":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a meal_type category: (1. cafe / 2. snack / 3. restaurant) ---- Your choice is: "}}},"pos":14,"start":1576274365072,"state":"busy","type":"cell"}
{"cell_type":"markdown","exec_count":34,"id":"41df85","input":"","kernel":"python3","pos":15,"state":"done","type":"cell"}
{"id":"0c0e67","input":"KB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(medium), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(non_vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- ask(price, X).\ndistance(X) :- ask(distance, X).\naccessibility(X) :- ask(accessibility, X).\ncuisine(X) :- ask(cuisine, X).\nmeal_type(X) :- ask(meal_type, X).\nvegan_option(X) :- ask(vegan_option, X).\nlanguage(X) :- ask(language, X).\nopening_hours(X) :- ask(opening_hours, X).\n\n\n% Asking clauses\nmultivalued(none).\n\nask(A, V):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nask(A, V):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nask(A, V):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nask(A, V):-\nread_py(A,V,Y), % get the answer\nasserta(known(Y, A, V)), % remember it\nwrite_py(known(Y, A, V)),\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"KB.pl\", \"w\") as text_file:\n    text_file.write(KB)\n\n\n\n# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\nimport string\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    #print(str(X))\n    sys.stdout.flush()\n    return True\n\n# a dictionary to store users' inputs\nusers_answers = dict()\n\n\npossible_answers = {\n    \"price\": [\"1. low\", \"2. medium\", \"3. high\"],\n    \"distance\": [\"1. near\", \"2. far\"], \n    \"accessibility\": [\"1. bicycle\", \"2. bus\"],\n    \"cuisine\": [\"1. asian\", \"2. middle_eastern\", \"3. western\"],\n    \"meal_type\": [\"1. cafe\", \"2. snack\", \"3. restaurant\"],\n    \"vegan_option\": [\"1. vegan\", \"2. non_vegan\"],\n    \"language\": [\"1. english\", \"2. german\"],\n    \"opening_hours\": [\"1. morning\", \"2. afternoon\", \"3. evening\"]\n}\n    \n\ndef read_py(A,V,Y):\n    if isinstance(Y, Variable):\n        while str(A) not in users_answers:\n            response = input(\"\\nPlease choose a \" + str(A) + \" category: \" + \"(\" + \" / \".join(possible_answers[str(A)]) + \")\" +\" ---- Your choice is: \")\n            if response.isnumeric():\n                response = int(response)\n                if response - 1 in list(range(len(possible_answers[str(A)]))):\n                    users_answers[str(A)] = possible_answers[str(A)][response-1][3:]\n                else:\n                    print(\"Choose your answer from the possible answers.\")\n            else:\n                print(\"Choose your answer from the possible answers.\")\n        \n        if str(A) in users_answers and users_answers[str(A)] == str(V):\n            Y.unify(\"yes\")\n        else:\n            Y.unify(\"no\")\n\n        return True\n    else:\n        return False\n#\nwrite_py.arity = 1\nread_py.arity = 3\n\nregisterForeign(read_py)\nregisterForeign(write_py)\n#\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\n#solution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)][0]\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)]\nif solution == []:\n    print(\"Cannot find suitable result. Try again\")\nelse:\n    solution = solution[0]\n    print(\"\\n You should go to \" + (f\"{solution['X']}\" if solution else \"unknown.\") + \" restaurant\")","pos":20,"type":"cell"}
{"id":0,"time":1576277022011,"type":"user"}
{"last_load":1576267206278,"type":"file"}