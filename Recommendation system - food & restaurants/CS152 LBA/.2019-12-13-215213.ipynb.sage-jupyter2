{"args":["--to","html"],"start":1576276129932,"state":"done","time":1576276134584,"type":"nbconvert"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":88870912},"trust":true,"type":"settings"}
{"end":1576274560109,"exec_count":46,"id":"97d923","input":"!apt install swi-prolog","kernel":"python3","output":{"0":{"name":"stdout","text":"\rReading package lists... 0%\r"},"1":{"name":"stdout","text":"\rReading package lists... 0%\r\rReading package lists... 0%\r"},"10":{"name":"stdout","text":"\rReading package lists... 68%\r"},"11":{"name":"stdout","text":"\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r\rReading package lists... 70%\r"},"12":{"name":"stdout","text":"\rReading package lists... 74%\r\rReading package lists... 74%\r"},"13":{"name":"stdout","text":"\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r"},"14":{"name":"stdout","text":"\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r\rReading package lists... 79%\r"},"15":{"name":"stdout","text":"\rReading package lists... 81%\r\rReading package lists... 81%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r\rReading package lists... 83%\r"},"16":{"name":"stdout","text":"\rReading package lists... 86%\r\rReading package lists... 86%\r"},"17":{"name":"stdout","text":"\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 88%\r\rReading package lists... 89%\r\rReading package lists... 89%\r"},"18":{"name":"stdout","text":"\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 89%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r\rReading package lists... 90%\r"},"19":{"name":"stdout","text":"\rReading package lists... 91%\r\rReading package lists... 91%\r"},"2":{"name":"stdout","text":"\rReading package lists... 3%\r\rReading package lists... 3%\r"},"20":{"name":"stdout","text":"\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r"},"21":{"name":"stdout","text":"\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r\rReading package lists... 93%\r"},"22":{"name":"stdout","text":"\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r\rReading package lists... 94%\r"},"23":{"name":"stdout","text":"\rReading package lists... Done\r\r\n"},"24":{"name":"stdout","text":"\rBuilding dependency tree... 0%\r\rBuilding dependency tree... 0%\r"},"25":{"name":"stdout","text":"\rBuilding dependency tree... 50%\r\rBuilding dependency tree... 50%\r"},"26":{"name":"stdout","text":"\rBuilding dependency tree... 74%\r"},"27":{"name":"stdout","text":"\rBuilding dependency tree       \r\r\n\rReading state information... 0%\r\rReading state information... 0%\r\rReading state information... Done\r\r\n"},"28":{"name":"stdout","text":"swi-prolog is already the newest version (7.6.4+dfsg-1build1).\r\n"},"29":{"name":"stdout","text":"0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.\r\nW: Not using locking for read only lock file /var/lib/dpkg/lock-frontend\r\nW: Not using locking for read only lock file /var/lib/dpkg/lock\r\nW: Not using locking for read only lock file /var/cache/apt/archives/lock\r\n"},"3":{"name":"stdout","text":"\rReading package lists... 6%\r\rReading package lists... 6%\r\rReading package lists... 6%\r\rReading package lists... 6%\r"},"4":{"name":"stdout","text":"\rReading package lists... 7%\r\rReading package lists... 7%\r"},"5":{"name":"stdout","text":"\rReading package lists... 20%\r"},"6":{"name":"stdout","text":"\rReading package lists... 35%\r\rReading package lists... 35%\r"},"7":{"name":"stdout","text":"\rReading package lists... 39%\r"},"8":{"name":"stdout","text":"\rReading package lists... 63%\r\rReading package lists... 63%\r\rReading package lists... 64%\r\rReading package lists... 64%\r\rReading package lists... 64%\r\rReading package lists... 64%\r"},"9":{"name":"stdout","text":"\rReading package lists... 68%\r\rReading package lists... 68%\r"}},"pos":0,"start":1576274554681,"state":"done","type":"cell"}
{"end":1576274769173,"exec_count":50,"id":"57b98d","input":"KB = \"\"\"\n%  Tell prolog that known/3 will be added later by asserta\n:- dynamic known/3. \n\n% Enter your KB below this line:\n\n% problem(battery) :- \\+engine(turning_over), battery(bad).\n% battery(bad) :- lights(weak).\n% battery(bad) :- radio(weak).\n% problem(out_of_gas) :- engine(turning_over), gas_gauge(empty).\n% problem(engine_flooded) :- engine(turning_over), smell(gas).\n\nrestaurant(the_Visit) :- price(medium), distance(near), accessibility(bicycle), cuisine(western), meal_type(cafe), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(maroush) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(hacibaba) :- price(low), distance(near), accessibility(bicycle), cuisine(middle_eastern), meal_type(snack), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(evening); opening_hours(afternoon)).\nrestaurant(green_Rice) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(morning); opening_hours(afternoon)).\nrestaurant(tangs) :- price(medium), distance(near), accessibility(bicycle), cuisine(asian), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), (opening_hours(afternoon); opening_hours(evening)).\nrestaurant(zur_Gerichtslaube) :- price(high), distance(far), accessibility(bicycle), cuisine(western), meal_type(restaurant), (vegan_option(vegan) ; vegan_option(non_vegan)), language(english), opening_hours(evening).\nrestaurant(parker_Bowles) :- price(medium), distance(near), accessibility(bus), cuisine(western), meal_type(restaurant), vegan_option(non_vegan), language(german), (opening_hours(evening)).\nrestaurant(cocolo_ramen) :- price(medium), distance(far), accessibility(bus), cuisine(asian), meal_type(restaurant), vegan_option(non_vegan), language(english), (opening_hours(afternoon); opening_hours(evening)).\n\n\n% The code below implements the prompting to ask the user:\n\nprice(X) :- menuask(price, X, [low, medium, high]).\ndistance(X) :- menuask(distance, X, [near, far]).\naccessibility(X) :- menuask(accessibility, X, [bicycle, bus]).\ncuisine(X) :- menuask(cuisine, X, [asian, middle_eastern, western]).\nmeal_type(X) :- menuask(meal_type, X, [cafe, snack, restaurant]).\nvegan_option(X) :- menuask(vegan_option, X, [vegan, non_vegan]).\nlanguage(X) :- menuask(language, X, [english, german]).\nopening_hours(X) :- menuask(opening_hours, X, [morning, afternoon, evening]).\n\n\n% Asking clauses\nmultivalued(none).\n\nmenuask(A, V, MenuList):-\nknown(yes, A, V), % succeed if true\n!.\t% stop looking\n\nmenuask(A, V, MenuList):-\nknown(_, A, V), % fail if false\n!, fail.\n\n% If not multivalued, and already known, don't ask again for a different value.\nmenuask(A, V, MenuList):-\n\\+multivalued(A),\nknown(yes, A, V2),\nV \\== V2,\n!.\n\nmenuask(A, V, MenuList):-\nread_py(A,V,Y,MenuList), % get the answer\nasserta(known(Y, A, V)), % remember it\nY == yes.\t% succeed or fail\n\"\"\"\n\nwith open(\"KB.pl\", \"w\") as text_file:\n    text_file.write(KB)","kernel":"python3","pos":1,"start":1576274769162,"state":"done","type":"cell"}
{"end":1576276126752,"exec_count":55,"id":"a894b4","input":"# The code here will ask the user for input based on the askables\n# It will check if the answer is known first\n\nfrom pyswip.prolog import Prolog\nfrom pyswip.easy import *\nimport string\n\nprolog = Prolog() # Global handle to interpreter\n\nretractall = Functor(\"retractall\")\nknown = Functor(\"known\",3)\n\n# a dictionary to store users' inputs for enabling a more natural language way of asking users\n# if the users' answers exist in the dictionary, \"attribute is value\" will be answered as \"yes\"\nusers_answers = dict()\n\n# Define foreign functions for getting user input and writing to the screen\ndef write_py(X):\n    print(str(X))\n    sys.stdout.flush()\n    return True\n\ndef read_py(A,V,Y,MenuList):\n    if isinstance(Y, Variable):\n        # generate a menu list with index in front of the values\n        menulist = [f\"{idx+1}. \" + str(val) for idx, val in enumerate(MenuList)]\n        \n        # if user has not answered the attribute\n        # ask for a numeric response\n        while str(A) not in users_answers:\n            response = input(\"\\nPlease choose a \" + str(A) + \" category: \" + \"(\" + \" / \".join(menulist) + \")\" +\" ---- Your choice is: \")\n            if response.isnumeric():\n                response = int(response)\n                if response - 1 in list(range(len(menulist))):\n                    users_answers[str(A)] = menulist[response-1][3:]\n                else:\n                    print(\"Choose your answer within the range of the possible answers.\")\n            else:\n                print(\"Choose your numeric answer from the possible answers.\")\n        \n        # is the user has answered the attribute with the value V and \"attribute (A) is value (V)\"\n        # then unify the variable Y with yes, else no\n        if str(A) in users_answers and users_answers[str(A)] == str(V):\n            Y.unify(\"yes\")\n        else:\n            Y.unify(\"no\")\n        return True\n    else:\n        return False\n    \n# define the arity of the functions\nwrite_py.arity = 1\nread_py.arity = 4\n\n# register the foreign functions into Prolog\nregisterForeign(read_py)\nregisterForeign(write_py)\n\n# links to the menu of each restaurant / cafe\nmenu = {\n            \"the_Visit\": \"https://drive.google.com/file/d/1hhxTrzMNxQZqfUoILd9tYWX5hfXX6v3Y/view\",\n            \"maroush\": \"https://www.marooush.de/menus/marooush_speisekarte.pdf\",\n            \"hacibaba\": \"https://www.hacibaba-berlin.de/#cat1\", \n            \"green_Rice\": \"https://drive.google.com/file/d/1Gd_arwkY0N5jhiDfMDZDsBVCQ4dl8UFr/view\",\n            \"tangs\": \"https://www.tangs-kantine.de/suppen-chinesisches-restaurant-berlin-kreuzberg/\",\n            \"parker_Bowles\": \"https://parker-bowles.com/wp-content/uploads/2019/08/DELI.pdf\",\n            \"zur_Gerichtslaube\": \"http://www.gerichtslaube.de/wp-content/uploads/2019/11/Speisekarte-eng-19.pdf\",\n            \"cocolo_ramen\": \"https://drive.google.com/file/d/1sNGL_7eRXGBHULfOvvEv1NCrAomzSMVE/view\"\n        } \n\n\nprolog.consult(\"KB.pl\") # open the KB\ncall(retractall(known))\n# query the results: the satisfied restaurant X\nsolution = [soln for soln in prolog.query(\"restaurant(X).\", maxresult=1)]\n\n# If no solution is found: the queried list is empty. Then we report no suitable results\nif solution == []:\n    print(\"\\nCannot find suitable result. Try again\")\n# if the solution is found: solution != empty\nelse:\n    # retrieve the name of the solution: the restaurant name\n    solution = solution[0]\n    # print the recommendations and link to its menu\n    print(\"\\nYou should go to \" + (f\"{solution['X']}\" if solution else \"unknown.\") + \" restaurant.\")\n    print(\"Here is the menu:\", menu[solution['X']])","kernel":"python3","output":{"0":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a price category: (1. low / 2. medium / 3. high) ---- Your choice is: "},"value":"2"},"1":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a distance category: (1. near / 2. far) ---- Your choice is: "},"value":"1"},"2":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a accessibility category: (1. bicycle / 2. bus) ---- Your choice is: "},"value":"1"},"3":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a cuisine category: (1. asian / 2. middle_eastern / 3. western) ---- Your choice is: "},"value":"3"},"4":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a meal_type category: (1. cafe / 2. snack / 3. restaurant) ---- Your choice is: "},"value":"1"},"5":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a vegan_option category: (1. vegan / 2. non_vegan) ---- Your choice is: "},"value":"1"},"6":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a language category: (1. english / 2. german) ---- Your choice is: "},"value":"1"},"7":{"name":"input","opts":{"password":false,"prompt":"\nPlease choose a opening_hours category: (1. morning / 2. afternoon / 3. evening) ---- Your choice is: "},"value":"1"},"8":{"name":"stdout","text":"\nYou should go to the_Visit restaurant.\nHere is the menu: https://drive.google.com/file/d/1hhxTrzMNxQZqfUoILd9tYWX5hfXX6v3Y/view\n"}},"pos":2,"scrolled":false,"start":1576276112064,"state":"done","type":"cell"}
{"id":"861f08","input":"","pos":7,"type":"cell"}
{"id":"e6f6b4","input":"","pos":8,"type":"cell"}
{"id":0,"time":1576276685169,"type":"user"}
{"last_load":1576270338371,"type":"file"}